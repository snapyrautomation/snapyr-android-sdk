apply plugin: 'maven-publish'
apply plugin: 'signing'
apply from: rootProject.file('gradle/versioning.gradle')

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
}

if (!hasProperty("signing.keyId")) {
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_KEY_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
    ext["MAVEN_USERNAME"] = System.getenv('MAVEN_USERNAME')
    ext["MAVEN_PASSWORD"] = System.getenv('MAVEN_PASSWORD')
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.source
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
            // Add generated BuildConfig to classpath - fixes javadoc errors like
            // "error: cannot find symbol import com.snapyr.sdk.core.BuildConfig;"
            owner.classpath += files(project.buildDir.absolutePath + "/generated/source/buildConfig/release")
        } else if (variant.name == 'debug') {
            // Add generated BuildConfig to classpath - fixes javadoc errors like
            // "error: cannot find symbol import com.snapyr.sdk.core.BuildConfig;"
            owner.classpath += files(project.buildDir.absolutePath + "/generated/source/buildConfig/debug")
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.source
}

publishing {
    publications {
        release(MavenPublication) {
            // The coordinates of the library, being set from variables that
            // we'll set up in a moment
            groupId GROUP
            artifactId POM_ARTIFACT_ID
            version getVersionName()

            // Two artifacts, the `aar` and the sources
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            artifact androidSourcesJar
            artifact androidJavadocsJar

            // Self-explanatory metadata for the most part
            pom {
                name = POM_NAME
                packaging = POM_PACKAGING
                description = POM_DESCRIPTION
                url = POM_URL

                licenses {
                    license {
                        name = POM_LICENCE_NAME
                        url = POM_LICENCE_URL
                        distribution = POM_LICENCE_DIST
                    }
                }

                developers {
                    developer {
                        id = POM_DEVELOPER_ID
                        name = POM_DEVELOPER_NAME
                    }
                }

                scm {
                    url = POM_SCM_URL
                    connection = POM_SCM_CONNECTION
                    developerConnection = POM_SCM_DEV_CONNECTION
                }
                // A slight fix so that the generated POM will include any transitive dependencies
                // that the library builds upon
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "sonatype"
            url = getReleaseRepositoryUrl()
            if (!getUrl().toString().startsWith("file:/")) {
                credentials {
                    username = System.getenv("MAVEN_USERNAME")
                    password = System.getenv("MAVEN_PASSWORD")
                }
            }
        }
    }
}

signing {
    sign publishing.publications
}

afterEvaluate {
    androidJavadocs.classpath += project.android.libraryVariants.toList().first().getJavaCompileProvider().get().classpath
}

publish.dependsOn build
publishToMavenLocal.dependsOn build